// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Generate into custom location because this repo has multiple prisma schemas
  output   = "./client"
}

generator pothos {
  provider     = "prisma-pothos-types"
  output       = "./pothos-types.ts"
  // Match client output location from above
  clientOutput = "./client"
}

datasource db {
  provider = "sqlite"
  url      = "file:../seanario.sqlite"
}

model Prompts {
  id              String  @id @default(uuid())
  aetherId        Int?
  authorsNote     String?
  description     String?
  memory          String?
  nsfw            Int
  parentId        String?
  promptContent   String
  publishDate     String?
  quests          String?
  tags            String
  title           String
  scriptZip       Bytes?
  novelAiScenario String?
  holoAiScenario  String?
  correlationId   String
  dateCreated     String
  dateEdited      String?
  deleted         Boolean @default(false)
  authorId        String?
  json            String?
  downloadCount   Int     @default(0)

  tagsFull    TagsPromptsMap[] @relation("PromptTagMap")
  worldInfos  WorldInfos[]     @relation("PromptWorldInfo")
  author      User?            @relation(fields: [authorId], references: [id])
  PromptVotes PromptVotes[]
  Comments    Comments[]

  @@index([aetherId], name: "IX_Prompts_AetherId")
  @@index([correlationId], name: "IX_Prompts_CorrelationId")
  @@index([parentId], name: "IX_Prompts_ParentId")
  @@index([downloadCount])
}

model WorldInfos {
  id            String  @id @default(uuid())
  aetherId      Int?
  entry         String
  keys          String
  promptId      String
  correlationId String
  dateCreated   String
  dateEdited    String?

  prompts Prompts @relation("PromptWorldInfo", fields: [promptId], references: [id], onDelete: Cascade)

  @@index([aetherId], name: "IX_WorldInfos_AetherId")
  @@index([correlationId], name: "IX_WorldInfos_CorrelationId")
  @@index([promptId], name: "IX_WorldInfos_PromptId")
}

model AetherPrompts {
  id              Int     @id @default(autoincrement())
  authorsNote     String?
  description     String?
  memory          String?
  nsfw            Int
  parentId        String?
  promptContent   String
  publishDate     String?
  quests          String?
  tags            String
  title           String
  scriptZip       Bytes?
  novelAiScenario String?
  holoAiScenario  String?
  correlationId   String
  dateCreated     String
  dateEdited      String?

  worldInfos AetherWorldInfos[] @relation("AetherPromptWorldInfo")

  @@index([correlationId], name: "IX_AetherPrompts_CorrelationId")
}

model AetherWorldInfos {
  id            Int     @id @default(autoincrement())
  entry         String
  keys          String
  promptId      Int
  correlationId String
  dateCreated   String
  dateEdited    String?

  prompts AetherPrompts @relation("AetherPromptWorldInfo", fields: [promptId], references: [id], onDelete: Cascade)

  @@index([correlationId], name: "IX_AetherWorldInfos_CorrelationId")
  @@index([promptId], name: "IX_AetherWorldInfos_PromptId")
}

// fst5 search tables
model PromptSearch {
  id   Int    @id @default(autoincrement())
  text String
}

model WorldInfoSearch {
  id   Int    @id @default(autoincrement())
  text String
}

model TagSearch {
  id   Int    @id @default(autoincrement())
  text String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  publicName     String?
  email          String           @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  dateCreated    DateTime         @default(now())
  Prompts        Prompts[]
  PromptVotes    PromptVotes[]
  Comments       Comments[]
  CommentVotes   CommentVotes[]
  CommentReplies CommentReplies[]

  @@index([name])
  @@index([publicName])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tags {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  tagPrompts TagsPromptsMap[] @relation("TagPrompt")

  @@index([name], name: "IX_Tags_Name")
}

model TagsPromptsMap {
  tagId    String
  promptID String

  tag    Tags    @relation("TagPrompt", fields: [tagId], references: [id], onDelete: Cascade)
  prompt Prompts @relation("PromptTagMap", fields: [promptID], references: [id], onDelete: Cascade)

  @@unique([tagId, promptID])
}

model PromptVotes {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  createdAt DateTime @default(now())
  rating    Int

  user   User    @relation(fields: [userId], references: [id])
  prompt Prompts @relation(fields: [promptId], references: [id])

  @@unique([userId, promptId])
  @@index([userId])
  @@index([promptId])
  @@index([createdAt])
  @@index([rating])
}

model Comments {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  comment   String
  createdAt DateTime @default(now())

  user           User             @relation(fields: [userId], references: [id])
  prompt         Prompts          @relation(fields: [promptId], references: [id])
  CommentVotes   CommentVotes[]
  CommentReplies CommentReplies[]

  @@index([userId])
  @@index([promptId])
  @@index([createdAt])
}

model CommentVotes {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  upvote    Boolean

  user    User     @relation(fields: [userId], references: [id])
  comment Comments @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
  @@index([createdAt])
}

model CommentReplies {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  reply     String
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  comment Comments @relation(fields: [commentId], references: [id])

  @@index([userId])
  @@index([commentId])
}
